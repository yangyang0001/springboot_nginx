#----------------------------------------------------------- nginx 常见配置 -----------------------------------------------------------

# user www www;                     # 定义运行 Nginx 的用户和用户组
# user nobody;
worker_processes  2;                # Nginx 进程数
worker_cpu_affinity auto;           # 配置 Nginx 进程的 CPU 亲缘性
error_log  logs/error.log  info;    # 定义全局错误日志的 位置和日志级别, 默认是 error
worker_rlimit_nofile 65535;         # 一个 woker 进程最多能够打开的文件数量
pid        logs/nginx.pid;          # 进程文件位置
worker_priority -10;                # 在 Linux 系统下资源使用的优先级
worker_shutdown_timeout 30;         # 若在 30s 内 Nginx 无法平滑退出, 则强行关闭 Nginx 进程

events {
    # Nginx 单进程最大连接数 (整个 Nginx 的最大连接数 = 单进程最大连接数 * 进程数)
    worker_connections  1024;
    # epoll 用在 Linux 2.6 以上版本的内核高性能的网络 I/O 上
    # 如果是在 FreeBSD 上, 则用 kqueue 模型
    use epoll;
}


http {
    include       mime.types;                                                                           # 文件扩展名和文件类型 映射表
    default_type  application/octet-stream;                                                             # 默认文件类型

    log_format  main    '$remote_addr - $remote_user [$time_local]'
                        '"$request" $status $body_bytes_sent'
                        '"$http_referer" "$http_user_agent" "$http_x_forwarded_for" "$http_cookie"';    # 定义日志格式

    client_header_buffer_size 1k;           # 设置用户请求头所使用的 buffer 的大小
    large_client_header_buffers 4 4k;       # 当默认的缓冲区大小不够用时就会使用此参数
    server_names_hash_bucket_size 1024;     # 设置 server_names 散列表的桶的大小, 在域名比较多的情况下需要调整这个值
    client_max_body_size 100m;              # 对上传文件大小的限制

    gzip on;                                # 开启 gzip
    gzip_comp_level 6;                     # 设置压缩等级 压缩范围为1~9, 级别越高压缩的比例越大CPU消耗越多 一般取值5到7
    gzip_min_length 1100;                  # 设置允许压缩的页面最小字节数
    gzip_buffers 4 8k;                     # 设置系统需要获取多大的缓存用于存储 gzip 的压缩结果数据流; 4 8k 表示按照原始数据大小以 4*8k 为倍数申请内存空间
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/x-httpd-php image/jpeg image/gif image/png;        # 匹配MIME 类型进行压缩
    output_buffers 2 32k;                   # 设置从磁盘读取响应的缓冲区的大小数量和大小; 2 32k 表示按照原始数据的大小以 2*32k 为倍数申请内存空间

    sendfile        on;                     # 启用 sendfile() 函数
    tcp_nopush      on;                     # 为防止网略阻塞, 需要开启 sendfile
    tcp_nodelay     on;                     # 为防止网略阻塞, 需要开启 sendfile
    keepalive_timeout  65;                  # 长链接超时时间, 单位是秒

    upstream backend {                      # upstram 指令块, weight 代表权重! 权重越高请求比例越高
        server 192.168.188.39:8080 max_fails=3 fail_timeout=20s weight=3;
        server 192.168.188.39:8081 max_fails=3 fail_timeout=20s weight=2;
    }

    server {
        listen       80;                            # 监听HTTP请求的接口
        server_name  localhost;                     # 域名
        charset koi8-r;                             # 默认编码
        access_log  logs/nginx.access_log  main;    # 访问日志记录

        location / {
            proxy_pass          http://backend;     # location 内部匹配连接
            proxy_redirect      off;
            proxy_set_header    Host                $host;
            proxy_set_header    X-Real-Ip           $remote_addr;
            proxy_set_header    X-Forwarded-For     $http_x_forwarded_for;  # 后端服务器通过 X-Forwarded-For 获取用户的真实 IP 地址

            index  index.html index.htm;
        }

        # 对 以 jpg|jpeg|gif 结尾的URL, 直接去系统文件读取
        location ~* \.(jpg|jpeg|gif)$ {
            root   html;
            expires 30d;    # 浏览器保存缓存的时间, 如果有 CDN 则 CDN 也会进行缓存!
        }


        error_page  404     /404.html;
        # 对后端服务器抛出的 404 错误进行页面重定向!
        location = /404.html {
            root   html;
        }
        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
