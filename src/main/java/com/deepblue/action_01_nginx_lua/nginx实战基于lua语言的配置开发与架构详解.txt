---------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------ 第1章 Nginx 学前必知必会 ---------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
环境: 一台 centos7 虚拟机

yum -y install wget gcc gcc-c++ autoconf automake make zlib zlib-devel pcre-devel pcre

下载源码:
    wget http://nginx.org/download/nginx-1.12.2.tar.gz

安装Nginx:
    tar -zxvf nginx-1.12.2.tar.gz
    cd /home/nginx-1.12.2
    ./configure --with-http_realip_module       // 开启 realip 模块!
    make && make install

默认安装位置: /usr/local/nginx

启动命令:
    /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf

关闭命令:
    ps -ef | grep nginx
    ./nginx -s stop   : 快速停止nginx
    ./nginx -s quit   : 完整有序的停止nginx
    ./nginx -s reload : 修改配置后重新加载生效


---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------- 第2章 基础配置 ---------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
Nginx 指令和指令块
    简单指令: 由指令名称 和 参数 和 分号组成!
    指令块　: 由指令名称 和 {} 组成!

    同一条简单指令 可能存在于 不同的 指令块中! 以最小指令块的赋值为最后的值!

Nginx 基本配置说明
    main 配置
        举例说明:
        user  nobody;
        worker_processes  1;
        events {
            worker_connections  1024;
        }

        注意: 如果一条指令 没有存在于 任何指令块中 这条指令就是全局指令!

    与客户端有关的配置
        与客户端有关的配置 一般配置在 http 指令块中!

        参考图片 01_客户端常用配置指令.png

        客户端常用指令中 特殊的举例:
        client_body_timeout 可以在 http、server、location 块中设置, 但 server_names_hash_bucket_size 却只能出现在 http 块中!

    server 指令块
        server 指令块 即 虚拟主机部分!
        格式:
            server {
                server_name testnginx.com www.testnginx.com;
            }

        规则:
            server_name 支持使用通配符正则表达式, 支持配置多域名、服务名称; 当有多个server块时, 会存在匹配的优先级问题, 优先级顺序如下:
            1. 精确的名字;
            2. 以*开头的最长通配符名称, 如 *.testnginx.com;
            3. 以*结尾的最长通配符名称, 如 testnginx.*;
            4. 按照文件顺序, 第1个匹配到的正则表达式;
            5. 如果没有匹配到对应的 server_name, 则会访问 default_server

    location 指令块
        使用范围: 在 server 指令块中使用! 作用: 根据客户端请求的 URL 去匹配不同的应用!
        
        location 指令匹配优先级顺序如下:
        = 优先级最高, 如果 = 匹配不到, 会和 ^～ 进行匹配; 继而是 ～ , 如果有多个 ～ , 则按照在文件里的先后顺序进行匹配;
        如果还匹配不到, 则与 /uri 进行匹配; 通用匹配 / 的优先级最低, 如果找不到其他配置, 就会进行通用匹配;
        @ 表示命名空间的位置, 通常在重定向时进行匹配, 且不会改变URL的原始请求。
        
        有些指令只能在location块中执行 主要有如下3个 
        internal: 表示该 location 指令块 只支持 Nginx内部的请求访问, 如支持 rewrite、error_page等 重定向, 但不能通过外部的HTTP直接访问。
        limit_except: 限定该 location 指令块可以执行的HTTP方法, 如GET。

        alias: 定义指定位置的替换, 如可以使用以下配置。
        location /a/ {
            alias /c/x/a/;
        }
        
        上述配置表示如果匹配到 /a/test.json 的请求, 在进入 location块后, 会将请求变成 /c/x/a/test.json
        
        root 指令: 
        location /404.html {
            root html;
        }
        
        上述配置表示如果匹配到  /404.html 的请求, 会使用 html/404.html 进行匹配资源!

        location 指令块中的 alias 和  root 的区别:
            alias的处理结果是: alias路径 替换 location路径
            root 的处理结果是: root 路径  ＋　location路径


    include 的使用:
        include 用来指定主配置文件包含的其他扩展配置文件, 扩展文件的内容也要符合 Nginx 的格式规范!

        include 可以使用在任意的 指令块中!
        使用格式: include /usr/local/nginx/conf/*.conf

    常见配置:
        参考  nginx.conf

    实战技巧:
        user 默认为 nobody, 使用 nobody 会导致 用户没有权限执行写硬盘等操作! 运维控制这块比较好!


内置变量
    在 客户端请求服务的过程中 我们可以获取 http 和 tcp 相关的信息! nginx 也提供了这种变量供我们使用!

    常见的内置变量, 请参考 常见内置变量表

    实战技巧:
    $args_name 的使用

        location / {
            if($args_username='zhangsan') {
                proxy_pass http://b
            }
            proxy_pass http://a
        }

        上述代码的请求默认路径为: http://a ; 如果URL中所带的参数 username=zhangsan 则请求路径变为 http://b

    $body_bytes_sent 和 $bytes_sent 的使用技巧
        $bytes_sent - $body_bytes_sent = HTTP 响应头的大小; 如果这差值非常大, 要注意 proxy_buffers 值的大小!

        可以参考如下进行修改相关的值:
        proxy_buffers 4 256k;
        proxy_buffer_size 128k;
        proxy_busy_buffers_size 256k;

    $uri 和 $request_uri 的使用技巧
        $request_uri 是原始的URL(包含请求参数), $uri 是经过一系列的重定向之后的URL(不包含请求参数)

        在线上环境中排查问题时, 如果在后端服务中看到的请求 和 在 Nginx 中存放的 $request_uri 无法匹配, 可以考虑去 $uri 里面进行查找。


---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------- 第3章 强化基础配置 -------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
牢记 Context
    每条指令都有自己的使用范围, 使用命令不对 Nginx 起不来, 报出异常!

获取请求的IP地址
    通常使用 $remote_addr 来获取, 但是这种地址 可能已经被反向代理的很多次的 IP 地址了;

    如果架构和请求模式如下:
    client ----> cdn ----> nginx ----> web 服务器!

    以上的请求架构模式, 获取真实的 IP 地址 参考以下配置:

        1、首先 Nginx 编译时需要开启 realip 模块
            ./configure --with-http_realip_module

        2、http 命令块中 配置如下
            set_real_ip_from    CDN_IP;
            real_ip_header      X-Forwarded-For;
            real_ip_recursive   on;

            举例(CDN_IP 可以配置多个如下):
            # set_real_ip_from    192.168.188.39;
            # set_real_ip_from    192.168.135.40;

管理请求的行为:
    对 IP 地址的访问控制:
        allow 和 deny 指令使用 参考 01_allow_deny_指令的使用.png

    auth 身份认证

    其余安全方面的 对于 软件员而言 了解即可!

Proxy 代理部分:
    proxy_pass 简单指令:
        使用范围: location、if in location、limit_except
        使用格式: proxy_pass URL;                           // 简单指令必须以分号结尾!
        使用含义: 将客户端请求 定位在 URL 上! URL 即资源位置!

        举例:
        location = /test {
            proxy_pass http://192.168.188.39:8080;
        }
        含义: 将 uri 为 /test 的请求, 发送到 http://192.168.188.39:8080 服务器上!

        proxy_pass 替换举例 (禁止使用):
            location /test/v1/ {
                # 替换 URL 的代理方法: /test/v1/ 会被替换为 /abc/
                # 举例: /test/v1/xxx?a=1 会被替换为 /abc/xxx?a=1
                proxy_pass http://192.168.188.39:8080/abc/;
            }

            location /aaa/ {
                # 替换 URL 的代理方法: /aaa/ 会被替换为 /
                # 举例: /aaa/xxx?a=1 会被替换为 /xxx?a=1
                proxy_pass http://192.168.188.39:8080/;
            }

        proxy_pass 规范用法:
            location /abc {
                # 不会有任何改变, 直接传递 原始的 URL
                proxy_pass http://192.168.188.39:8080;
            }

        proxy_pass 使用原则:
            location 模块使用了 URI 的正则表达式 则 proxy_pass 就不能配置任何 URI 相关的东西了, 一个/都不行!
            即禁止使用 proxy_pass http://192.168.188.39:8080/abc/; 类似的配置! 否则可能会出现不可预测的问题!


upstream 指令块:
    使用范围: http 指令块中!

    使用格式:
        upstream name {
            server address [params]
        }

    使用案例:
        upstream test_servers {
            server 192.168.188.39:8080 max_fails=3 fail_timeout=20s weight=3;
            server www.deepblue.com backup;
            server www.deepblue.com down;
        }

    proxy_pass 可以代理一台服务器, 如果想代理多台服务器, 这时就要引入 upstream 指令块!

    代理多台服务器案例:

    http {

        upstream test_servers {
            server 192.168.188.39:8080 max_fails=3 fail_timeout=20s weight=3;
            server 192.168.188.39:8081 max_fails=3 fail_timeout=20s weight=2;
            server www.deepblue.com backup;
            server www.deepblue.com down;
        }

        server {
            listen 80;

            location / {
                proxy_pass http://test_servers;
            }
        }

    }

    server 指令参数含义:
        upstream test_servers {
            server 192.168.188.39:8080 max_fails=3 fail_timeout=20s weight=3;
            server 192.168.188.39:8081 max_fails=3 fail_timeout=20s weight=2;
            server www.deepblue.com backup;
            server www.deepblue.com down;
        }

        down   : 标记当前服务不可用!
        backup : 当所有可用服务器都挂掉时 backup 起作用!
        max_fails 和 fail_timeout 是联合使用的, 即在 timeout 时间内失败的次数 大于 max_fails 则认为当前服务器不可用!
        weight : 服务器权重值, 值越大获得请求数量占比越高!

        upstream 指令块中的 server 简单指令的参数详解, 可以参考 上面的解释也可以参考: 02_upstream_server简单指令参数详解.png

    故障转移 (实战中还没有见过使用的)
        常用故障转移指令:
        proxy_next_upstream proxy_next_upstream_tries   proxy_next_upstream_timeout 等

    负载均衡
        负载均衡策略和使用方式举例: 具体的不同指令 参考: 03_upstream负载均衡策略.png

        ip_hash 使用举例:
            upstream test_servers {
                ip_hash;
                server 192.168.188.39:8080 max_fails=3 fail_timeout=20s;
                server 192.168.188.39:8081 max_fails=3 fail_timeout=20s;
            }

        least_conn 使用举例:
            upstream test_servers {
                least_conn;
                server 192.168.188.39:8080 max_fails=3 fail_timeout=20s;
                server 192.168.188.39:8081 max_fails=3 fail_timeout=20s;
            }

        根据 URL hash 举例:
            upstream test_servers {
                hash $request_uri;
                server 192.168.188.39:8080 max_fails=3 fail_timeout=20s;
                server 192.168.188.39:8081 max_fails=3 fail_timeout=20s;
            }

    利用长连接提升性能:
        upstream 接收的连接一般是短连接, 可以配置长连接提升性能!

        keepalive 配置长连接使用案例:
            http {
                keepalive_requests 1000;
                keepalive_timeout 60;

                upstream test_servers {
                    server 192.168.188.39:8080 max_fails=3 fail_timeout=20s weight=3;
                    server 192.168.188.39:8081 max_fails=3 fail_timeout=20s weight=2;
                    keepalive 100;
                }

                server {
                    proxy_http_version 1.1;
                    proxy_set_header Connection "";

                    location / {
                        proxy_pass http://test_servers;
                    }
                }
            }

        长连接配置指令参考: 04_长连接有关指令配置详解.png
        注意:
            如果没有添加长连接, 在压测环境中, 可能会出现这样的情景:
            当压测达到一定的QPS (Query Per Second, 每秒查询率) 后, Nginx服务器突然 "卡死", QPS直接降到几乎为0, 但是压测并没有停;
            几分钟后又会自动恢复, 然后再压测一段时间后, QPS 又会突然降到接近于0。这种情况就要考虑是不是timewait的状态过多了。

        
    利用 resolver 加速对内部域名的访问 (实战中还没有见过使用的, 但从实战意义上来说是非常有用的)
        举例说明:
        server {
            listen 80;

            location / {
                resolver 10.0.0.1 valid=30s;
                resolver_timeout 5s;
                set $upstream_host www.deepblue.com;
                proxy_pass http://$upstream_host:8080;
            }

        }

        具体可以参考: 05_location_resolver指令加速DNS解析.png


rewrite 指令:
    使用方式参考 07_rewrite指令使用详解.png

    设置变量 set 指令:

    使用范围: server location if
    使用格式: set $param value
    使用含义: 为当前请求设置值, 这个值可以是文本或者变量! 当请求结束后会被清除掉!

    举例说明:
        location / {
            set $a '1';
            set $b '2';
            set $ab $a$b;       # 可以合并两个变量的值
            return 200 $ab;     # 输出 12 状态码为200
        }


---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------- 第4章 常用模块精解 ---------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
剩下的内容以后有精力和时间再研究和学习!