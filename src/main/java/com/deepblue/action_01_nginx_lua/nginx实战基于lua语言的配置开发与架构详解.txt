---------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------ 第1章 Nginx 学前必知必会 ---------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
环境: 一台 centos7 虚拟机

yum -y install wget gcc gcc-c++ autoconf automake make zlib zlib-devel pcre-devel pcre

下载源码:
    wget http://nginx.org/download/nginx-1.12.2.tar.gz

安装Nginx:
    tar -zxvf nginx-1.12.2.tar.gz
    cd /home/nginx-1.12.2
    ./configure
    make && make install

默认安装位置: /usr/local/nginx

---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------- 第2章 基础配置 ---------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
Nginx 指令和指令块
    简单指令: 由指令名称 和 参数 和 分号组成!
    指令块　: 由指令名称 和 {} 组成!

    同一条简单指令 可能存在于 不同的 指令块中! 以最小指令块的赋值为最后的值!

Nginx 基本配置说明
    main 配置
        举例说明:
        user  nobody;
        worker_processes  1;
        events {
            worker_connections  1024;
        }

        注意: 如果一条指令 没有存在于 任何指令块中 这条指令就是全局指令!

    与客户端有关的配置
        与客户端有关的配置 一般配置在 http 指令块中!

        参考图片 01_客户端常用配置指令.png

        客户端常用指令中 特殊的举例:
        client_body_timeout 可以在 http、server、location 块中设置, 但 server_names_hash_bucket_size 却只能出现在 http 块中!

    server 指令块
        server 指令块 即 虚拟主机部分!
        格式:
            server {
                server_name testnginx.com www.testnginx.com;
            }

        规则:
            server_name 支持使用通配符正则表达式, 支持配置多域名、服务名称; 当有多个server块时, 会存在匹配的优先级问题, 优先级顺序如下:
            1. 精确的名字;
            2. 以*开头的最长通配符名称, 如 *.testnginx.com;
            3. 以*结尾的最长通配符名称, 如 testnginx.*;
            4. 按照文件顺序, 第1个匹配到的正则表达式;
            5. 如果没有匹配到对应的 server_name, 则会访问 default_server

    location 指令块
        使用范围: 在 server 指令块中使用! 作用: 根据客户端请求的 URL 去匹配不同的应用!
        
        location 指令匹配优先级顺序如下:
        = 优先级最高, 如果 = 匹配不到, 会和 ^～ 进行匹配; 继而是 ～ , 如果有多个 ～ , 则按照在文件里的先后顺序进行匹配;
        如果还匹配不到, 则与 /uri 进行匹配; 通用匹配 / 的优先级最低, 如果找不到其他配置, 就会进行通用匹配;
        @ 表示命名空间的位置, 通常在重定向时进行匹配, 且不会改变URL的原始请求。
        
        有些指令只能在location块中执行 主要有如下3个 
        internal：表示该 location 指令块 只支持 Nginx内部的请求访问, 如支持 rewrite、error_page等 重定向, 但不能通过外部的HTTP直接访问。
        limit_except：限定该 location 指令块可以执行的HTTP方法, 如GET。

        alias：定义指定位置的替换, 如可以使用以下配置。
        location /a/ {
            alias /c/x/a/;
        }

        上述配置表示如果匹配到 /a/test.json 的请求, 在进入 location块后, 会将请求变成 /c/x/a/test.json

---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------- 第3章 强化基础配置 -------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------




---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------- 第4章 常用模块精解 ---------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
